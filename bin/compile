#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_start"

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

LOGGER_FLAGS=""

LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

topic "Build directory $BUILD_DIR"
topic "Cache directory $CACHE_DIR"
topic "Stack is $STACK"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

for PACKAGE in $(cat $BUILD_DIR/Aptfile); do
  topic "Fetching .debs for $PACKAGE"
  apt-get $APT_OPTIONS -y -d install $PACKAGE | indent
done

apt-get $APT_OPTIONS -y -d install bc
apt-get $APT_OPTIONS -y -d install zip
apt-get $APT_OPTIONS -y -d install wget


mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"


curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/util
. bin/java

gem install mustache


# create tibco user
# useradd -c "TIBCO user" -m -p tibco123 -g users -s /bin/bash tibco

# install Amazon Tools

AWS_S3_DIR="$CACHE_DIR/aws/s3"

if [ -d $AWS_S3_DIR ]; then
	topic "Deleting $AWS_S3_DIR directory" 
	rm -rf $AWS_S3_DIR
fi
	
mkdir -p "$AWS_S3_DIR"
cd "$AWS_S3_DIR"
topic "Getting s3-curl.zip"
wget --quiet http://s3.amazonaws.com/doc/s3-example-code/s3-curl.zip

topic "Unzipping s3-curl.zip"
unzip -qq s3-curl.zip
mkdir -p "bin"
rsync -a --no-o --no-g s3-curl/ bin
chmod 755 "bin/s3curl.pl"
	
# install TEA 
TEA_URL="https://s3.amazonaws.com/vbansal/wombat/TIB_tea_2.0.0_linux26gl23_x86_64.zip"
REPO_DIR="$CACHE_DIR/repo"
mkdir -p "$REPO_DIR"
cd "$REPO_DIR"
if [ ! -n "$REPO_DIR/TIB_tea_2.0.0_linux26gl23_x86_64.zip" ]; then
	topic "Downloading TEA -- ${TEA_URL##*/} from S3"
	"$AWS_S3_DIR/bin/s3curl.pl --id $S3_KEY --key $S3_ACCESS_KEY https://s3.amazonaws.com/vbansal/wombat/TIB_tea_2.0.0_linux26gl23_x86_64.zip > ${TEA_URL##*/}"
	#download TEA from S3
fi
 
OPT_DIR="$CACHE_DIR/opt"
OPT_TMP="$OPT_DIR/tmp"
mkdir -p $OPT_DIR
mkdir -p $OPT_TMP
# chown tibco:users -R /opt/tmp
mkdir $OPT_DIR/tibco
# chown tibco:users /opt/tibco
chmod 775 $OPT_DIR/tibco

cd "$OPT_TMP"
# curl --silent --location https://s3.amazonaws.com/vbansal/wombat/TIB_BW_6.2.0_linux26gl23_x86_64.zip | unzip -x
#. "$OPT_TMP"


export_env_dir $ENV_DIR

KEEP_M2_CACHE="true"

#

if [ ! -d $CACHE_DIR ]; then
  KEEP_M2_CACHE="false"
elif [ -f $CACHE_DIR/removeM2Cache ]; then
  KEEP_M2_CACHE="false"
fi

if [ "true" == $KEEP_M2_CACHE ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java retain_m2_repo"
fi

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# create default system.properties
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.7" > ${BUILD_DIR}/system.properties
fi

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}..."
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo " done"

# change to cache dir to install maven
cd $CACHE_DIR

# install maven with base repository
MAVEN_URL="http://heroku-jvm-langpack-java.s3.amazonaws.com/maven.central.tar.gz"

if [ ! -d .maven ]; then
  echo -n "-----> Installing Maven 3.0.5..."
  curl --silent --max-time 60 --location $MAVEN_URL | tar xz
  chmod +x .maven/bin/mvn
  echo " done"
fi

if [ -n "$MAVEN_SETTINGS_PATH" ]; then
  MAVEN_SETTINGS_OPT="-s $MAVEN_SETTINGS_PATH"
elif [ -n "$MAVEN_SETTINGS_URL" ]; then
  echo -n "-----> Installing settings.xml..."
  mkdir -p .m2
  curl --silent --max-time 10 --location $MAVEN_SETTINGS_URL --output .m2/settings.xml
  echo " done"
  MAVEN_SETTINGS_OPT="-s $CACHE_DIR/.m2/settings.xml"
elif [ -f $BUILD_DIR/settings.xml ]; then
  MAVEN_SETTINGS_OPT="-s $BUILD_DIR/settings.xml"
else
  unset MAVEN_SETTINGS_OPT
fi

# change to build dir to run maven
cd $BUILD_DIR

export MAVEN_OPTS="-Xmx1024m"

# build app
BUILDCMD="$CACHE_DIR/.maven/bin/mvn -B -Duser.home=$BUILD_DIR -Dmaven.repo.local=$CACHE_DIR/.m2/repository $MAVEN_SETTINGS_OPT -DskipTests=true clean install"
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with Maven"
  exit 1
fi

# finalize cache
if [ "false" == $KEEP_M2_CACHE ]; then
  touch $CACHE_DIR/removeM2Cache
fi

#copy .m2 and .maven if needed
if [ "true" == $KEEP_M2_CACHE ]; then
  for DIR in ".m2" ".maven" ; do
    cp -r $CACHE_DIR/$DIR $DIR
  done
fi

PROFILE_PATH="$BUILD_DIR/.profile.d/java.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="/app/.jdk/bin:$PATH"' >> $PROFILE_PATH
echo 'export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -Djava.rmi.server.useCodebaseOnly=true"' >> $PROFILE_PATH

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_end $LOGGER_FLAGS"
